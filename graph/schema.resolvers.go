package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"
	"time"
	"golang-nextjs-todo/db"
	"golang-nextjs-todo/graph/gql_controllers"
	"golang-nextjs-todo/graph/model"
	"golang-nextjs-todo/models"


	"go.mongodb.org/mongo-driver/bson/primitive"
)

func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*models.Task, error) {
	taskcollection := db.MongoDB.Database("golangTodos").Collection("tasks")
	id := ctx.Value("id")
	userId := id.(primitive.ObjectID)
	task := &models.Task{
		Title:         input.Title,
		Completed:     false,
		CompletedDate: "",
		CreatedAt:     time.Now().Format(time.RFC3339),
		UpdatedAt:     time.Now().Format(time.RFC3339),
		UserID:        userId,
	}
	task, err := gql_controllers.CreateTask(ctx, taskcollection, task)
	if err != nil {
		return nil, err
	}
	return task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTask) (*models.Task, error) {
	taskcollection := db.MongoDB.Database("golangTodos").Collection("tasks")
	task := &models.Task{
		ID:           input.ID,
		Title:         input.Title,
		Completed:     input.Completed,
		UpdatedAt:    time.Now().Format(time.RFC3339),
	}
	err := gql_controllers.UpdateTask(ctx,taskcollection, task)
	if err != nil {
		return nil, err
	}

	updatedTask,err := gql_controllers.GqlGetTask(ctx, taskcollection, input.ID)
	if err != nil {
		return nil, err
	}
	return updatedTask, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id primitive.ObjectID) (primitive.ObjectID, error) {
	taskcollection := db.MongoDB.Database("golangTodos").Collection("tasks")
	err := gql_controllers.DeleteTask(ctx, taskcollection, id)
	if err != nil {
		return id,err
	}
	return id, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*models.Task, error) {
	taskcollection := db.MongoDB.Database("golangTodos").Collection("tasks")
	id := ctx.Value("id")
	userId := id.(primitive.ObjectID)
	tasks, err := gql_controllers.GqlGetAllTasks(ctx, taskcollection, userId)
	if err != nil {
		return nil, err
	}
	return tasks, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id *primitive.ObjectID) (*models.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
