package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"
	"os"
	"time"
	"golang-nextjs-todo/graph/model"
	"golang-nextjs-todo/internals/models"
	"golang-nextjs-todo/internals/utils"
	generated1 "golang-nextjs-todo/graph/generated"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"golang.org/x/crypto/bcrypt"
	"github.com/golang-jwt/jwt"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, inpuit model.SignupInput) (*models.User, error) {
	user := &models.User{
		FirstName: inpuit.FirstName,
		LastName:  inpuit.LastName,
		Email:     inpuit.Email,
		Password:  inpuit.Password,
		CreatedAt: time.Now().Format(time.RFC3339),
		UpdatedAt: time.Now().Format(time.RFC3339),
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), 10)
	if err != nil {
		return nil, err
	}
	user.Password = string(hash)

	if _,err := r.UserController.GetUserByEmail(user.Email); err == nil {
		return nil, fmt.Errorf("user already exists")
	}

	userId, err := r.UserController.CreateUser(user)
	if err != nil {
		return nil, err
	}

	// Generate jwt token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"sub": userId,
		"exp": time.Now().Add(time.Hour * 24 * 30).Unix(),
	})
	tokenString, err := token.SignedString([]byte(os.Getenv("JWT_SECRET")))
	if err != nil {
		return nil, err
	}
	user.Token = tokenString

	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*models.User, error) {
	user, err := r.UserController.GetUserByEmail(input.Email)
	if err != nil {
		return nil, fmt.Errorf("this email is not registered")
	}

	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password))
	if err != nil {
		return nil, err
	}

	// Generate jwt token
	tokenString, err := utils.GenerateJWTToken(user.ID)
	if err != nil {
		return nil, err
	}
	user.Token = tokenString

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*models.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id primitive.ObjectID) (primitive.ObjectID, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*models.Task, error) {
	id := ctx.Value("id")
	userId := id.(primitive.ObjectID)
	task := &models.Task{
		Title:         input.Title,
		Completed:     false,
		CompletedDate: "",
		CreatedAt:     time.Now().Format(time.RFC3339),
		UpdatedAt:     time.Now().Format(time.RFC3339),
		UserID:        userId,
	}
	task, err := r.TaskController.CreateTask(task, userId)
	if err != nil {
		return nil, err
	}
	return task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTask) (*models.Task, error) {
	task := &models.Task{
		ID:        input.ID,
		Title:     input.Title,
		Completed: input.Completed,
		UpdatedAt: time.Now().Format(time.RFC3339),
	}
	_, err := r.TaskController.UpdateTask(input.ID, task)
	if err != nil {
		return nil, err
	}

	updatedTask, err := r.TaskController.GetTaskById(input.ID)
	if err != nil {
		return nil, err
	}
	return updatedTask, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id primitive.ObjectID) (primitive.ObjectID, error) {
	err := r.TaskController.DeleteTask(id)
	if err != nil {
		return id, err
	}
	return id, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	users, err := r.UserController.GetAllUsers()
	if err != nil {
		return  []*models.User{}, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
	user, err := r.UserController.GetUserById(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*models.Task, error) {
	id := ctx.Value("id")
	userId := id.(primitive.ObjectID)
	tasks, err := r.TaskController.GetAllTasks(userId)
	if err != nil {
		return nil, err
	}
	return tasks, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id primitive.ObjectID) (*models.Task, error) {
	task, err := r.TaskController.GetTaskById(id)
	if err != nil {
		return nil, err
	}
	return task, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() generated1.MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() generated1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
